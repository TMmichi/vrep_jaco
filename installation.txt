Moveit! package setup and ROS with V-rep configuration for self-modified robot
** You need Meshes (STL CAD files), URDF for your robot
** Please try to get the appropriate urdf file for your robot. It will again, be used in V-rep
** catkin workspace should be 'catkin_make'd before attempt on moveit_setup_assistant

**reference: 
MOVEIT! setup: http://docs.ros.org/melodic/api/moveit_tutorials/html/doc/setup_assistant/setup_assistant_tutorial.html 
V-rep setup: 1 importing URDF. https://learning.oreilly.com/library/view/mastering-ros-for/9781788478953/51019ef2-304b-48e7-b1ff-fbcc2b65f5ed.xhtml 
             2 LUA script. http://www.coppeliarobotics.com/helpFiles/en/rosTutorialIndigo.htm 
MOVEIT! - ROS config:


1. moveit! installation
    
    sudo apt-get install ros-<distro>-moveit


2. Franka description package installation
    
    sudo apt-get install ros-<distro>-franka-description


3. Sourcing your rospackage in bashrc script

    source rospackage-path/devel/setup.bash


4. moveit! setup for your robot

    roslaunch moveit_setup_assistant setup_assistant.launch

    4-1. Start:

        - ceate New MoveIt Configuration Package or Edit Existing MoveIt Configuration Package.

            - load model urdf 
                -> your destination path to urdf and meshes must be able to be found by roscd
                -> ex) roscd jaco_description | should move to your destination
                -> else, re-source your bash file

    4-2. Self-Collision

        - Sampling Density: Close to Low (10000)

        - Min. collisions for "always"-colliding paris: 95% (default)

        - Generate Collision Matrix -> will produce your self-collision matrix

    4-3. Virtual Joints
        -> required to attach the robot to the world frame

        - Add Virtual Joint

            - Virtual Joint Name can arbitrarily be set (virtual_joint_<model> will be fine)

            - child link: <model>_base

            - Parent Frame Name: world

            - Joint TYpe: fixed

                -> Save

    4-4. Planning Groups
        -> Defining: subject for motion planning, what an end effector is.

        - Add Group

            - Group Name: <model name> ex) jaco_arm

            - Kinematic Solver: kdl_kinematics_plugin. (If you have custom kinematics plugin, follow the description in the moveit tutorial)

            - Kin. Search Resolution, Search Timeout: set to default

            - OMPL Planning: set to default (None)

            - Add Joints

                - Choose all the joints that affects motion planning.

                - joint_base should not be included

                -> save

            - Add Group
                -> for the end-effector

                - Group Name: <gripper name> ex) jaco_hand

                - No Kinematic Solver

                - Kin. Search Resolution, Kin. Search Timeout: set to default

                - OMPL: set to default

                - Add Links

                    - <all the links in the gripper>

                    -> save

    4-5. Robot Poses
        -> defining initial position

        - Add Pose

            - Pose Name: Can arbitrarily be set. ex) init pose

            - Planning Group: default

            - TIP: Try to move your robot to be in an impossible position. Collision matrix will let you know if there is any collision.

    4-6. End Effectors
        -> Designating hand to the end-effector group

        - Add End Effector

            - End Effector Name: hand

            - End Effector Group: <gripper name>. ex) jaco_hand

            - Parent link: attached link. ex) jaco_link_5

            - Parent Group: BLANK

            -> save

    4-7. Passive Joints
        -> Not yet to be experienced. Please leave it.

    4-8. ROS Control
        -> robot controller in ROS

        - Controller Name: <model>_position_controller

        - Controller Type: position_controllers/JointPositionController
                -> should depends on your robot controlling setup.

        - Add Planning Group Joints

            - <model name>

            -> save

    4-9. Simulation
        -> If you are running your simulation in the gazeo environment, then you may need it.
        -> Not needed since the simulation is run on V-rep
    
    4-10. 3D Perception
        -> setting parameters of the yaml config file. for 3d sensors
        -> No need of PCL nor Depth map for now.

    4-11. Author Information

    4-12. Configuration Files
        -> Package generation to the destnation path

        - Choose a location and name for the ROS package. ex)~/Documents/vrep_jaco/src/<your model_jaco>
            -> *create new folder. else, your will get an error

        -> Generate Package
    
    catkin_make


5. V-rep scene file config
    -> You need your URDF file for your robot.
    -> If you have a xacro file instead of URDF, try:
            $ rosrun xacro xacro --inorder <name of your xacro>.xacro > <name of your output urdf>.URDF
    -> If any error occurs when converting to URDF or importing URDF file to V-rep, please check your xacro or URDF file.

    - Launch vrep

    5-1. Import your robot URDF

        - from main drop-down menu bar, click Plugins-URDF import...

            - Import

            - find your urdf file in your directory.

        - Add additional parts required in your environment
    
    5-2. Setting ROSInterface Lua script **IMPORTANT**
            -> If not done, you cannot check your moveit configuration with the V-rep simulation environment

        - from main drop-down menu bar, click Add-Dummy

        - right-click Dummy-Add-Associate child script-Non threaded

        - code your own ROSInterface Lua script to:
            - manipulate your joint by target position or target velocity from subscribed /joint_state topic
                -> if in test with your demo.launch from moveit config, proper topic name would be:
                    /move_group/fake_controller_states
            - publish your robot /joint states topic
            - publish sim_time
            * joint state use ROS message type of sensor_msgs/JointState.
            * It requires header with stamp, name with joints name in order, and corresponding position or velocity of joints respectively. effort can be ignored.
            * If you need more info, please refer to the ROS tutorial in coppeliarobotics.com
        
    5-3. Configuration

        - save it into your bringup_folder/scene


6. 